namespace ArgumentativeFilters.CodeGeneration;

public static class TypeTemplates
{
    public static string ArgumentativeFilterTemplate(string containingNamespace, string containingClass, string containingClassAccessibility, string factoryBody) => $@"// <auto-generated/>
using global::System;
using global::Microsoft.AspNetCore.Http;
using global::Microsoft.Extensions.DependencyInjection;

#nullable enable

namespace {containingNamespace}
{{
    {containingClassAccessibility} static partial class {containingClass}
    {{
        {containingClassAccessibility} static EndpointFilterDelegate Factory(EndpointFilterFactoryContext context, EndpointFilterDelegate {VariableNames.EndpointFilterDelegate})
        {{
{factoryBody}
            return {VariableNames.EndpointFilterDelegate};
        }}

        private static int? GetArgumentIndex(this EndpointFilterFactoryContext context, string argumentName) 
            => context.MethodInfo.GetParameters().FirstOrDefault(p => string.Equals(p.Name, argumentName, StringComparison.Ordinal))?.Position;
    }}
}}
";

    public static string ArgumentativeFilterAttribute => $@"
using global::System;

namespace ArgumentativeFilters
{{
    /// <summary>
    /// A method marked with this attribute will have an argumentative filters factory method generated for it.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
    public class ArgumentativeFilterAttribute : Attribute
    {{
    }}
}}
";

    public static string IndexOfArgumentAttribute => $@"
using global::System;

namespace ArgumentativeFilters
{{
    /// <summary>
    /// A method marked with this attribute will contain the index of the provided argument name.
    /// </summary>
    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
    public class IndexOfAttribute : Attribute
    {{
        public IndexOfAttribute(string argumentName)
        {{
            ArgumentName = argumentName;
        }}

        public string ArgumentName {{ get; }}
    }}}}
";
}